using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SubscriptionCleanup
{
    public class SubscriptionCleanup
    {
        private readonly ILogger<GreetingService> _log;
        private readonly IConfiguration _config;
        private readonly FileProcessor _fileProcessor;

        public SubscriptionCleanup(ILogger<GreetingService> log, IConfiguration config, FileProcessor fileProcessor)
        {
            _log = log;
            _config = config;
            _fileProcessor = fileProcessor;
        }

        /// <summary>
        /// Process subscription IDs and the following JSON files to identify which resources are being used corresponding
        /// to the source CSV file generated by azure or by an indivudual with the specefied format
        /// </summary>
        public void GenerateSubscriptionRecord()
        {
            List<string> subIds = _config.GetSection("SubscriptionIds").Get<List<string>>();
            List<string> files = _fileProcessor.GatherFiles(_config.GetSection("SourceDirectories").Get<List<string>>());
        }

        private Dictionary<Resource> BuilderResources(List<string> subIds, List<string> files)
        {
            HashSet<Resource> resources = new HashSet<Resource>()
            var resourceIdKey = _config.GetValue<string>("ResourceIdKey");
            string[] fileLines;

            foreach(var filePath in files)
            {
                fileLines = File.ReadAllLines(filePath);

                foreach(var line in fileLines)
                {
                    resources.
                }
            }

            return resources;
        }
    }

    public class Resource : IComparable<Resource>
    {
        public Resource(string group, string name)
        {
            Group = group;
            Name = name;
        }

        public string Group { get; }
        public string Name { get; }

        public int CompareTo(Resource other)
        {
            if(other == null)
            {
                return 1;
            }

            if (Group.Equals(other.Group) && Name.Equals(other.Name))
            {
                return 0;
            }

            return Name.CompareTo(other.Name);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (ReferenceEquals(obj, null))
            {
                return false;
            }

            return Group.Equals(((Resource)obj).Group);
        }

        public override int GetHashCode()
        {
            var temp = Group + Name;

            return temp.GetHashCode();
        }

        public static bool operator ==(Resource left, Resource right)
        {
            if (ReferenceEquals(left, null))
            {
                return ReferenceEquals(right, null);
            }

            return left.Equals(right);
        }

        public static bool operator !=(Resource left, Resource right)
        {
            return !(left == right);
        }

        public static bool operator <(Resource left, Resource right)
        {
            return ReferenceEquals(left, null) ? !ReferenceEquals(right, null) : left.CompareTo(right) < 0;
        }

        public static bool operator <=(Resource left, Resource right)
        {
            return ReferenceEquals(left, null) || left.CompareTo(right) <= 0;
        }

        public static bool operator >(Resource left, Resource right)
        {
            return !ReferenceEquals(left, null) && left.CompareTo(right) > 0;
        }

        public static bool operator >=(Resource left, Resource right)
        {
            return ReferenceEquals(left, null) ? ReferenceEquals(right, null) : left.CompareTo(right) >= 0;
        }
    }
}
